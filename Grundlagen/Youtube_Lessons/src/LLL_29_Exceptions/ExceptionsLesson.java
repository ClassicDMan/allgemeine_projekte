package LLL_29_Exceptions;

public class ExceptionsLesson {
	/*
	 * Exception is an unwanted or unexpected event, which occurs during the
	 * execution of a program i.e at run time, that disrupts the normal flow of the
	 * program’s instructions
	 * 
	 * Errors represents serious and usually irrecoverable conditions like library
	 * incompatibility, Infinity recursion, or memory leaks.
	 * 
	 * -Errors are generated to indicate errors generated by the runtime
	 * environment. Example: JVM is out of memory. Normally, programs cannot recover
	 * from errors
	 * 
	 * 
	 * Exception: exception indicates conditions that a reasonable application might
	 * try to catch.
	 * 
	 * -Exceptions are the problems which can occur at runtime and compile time. It
	 * mainly occurs in the code written by the developers
	 * 
	 * An exception can occur for many different reasons: - a user has entered an
	 * invalid data. - A file that needs to be opened cannot be found. - A network
	 * connection has been lost in the middle of the communication.
	 * 
	 * //////////////////////////////////////////////////
	 *
	 * - Finally block in Java can be used to put “clean up” code such as closing a
	 * file, closing connection, etc…
	 * 
	 * - And finally block is always get executed whether the exception has occurred
	 * or not
	 * 
	 * Rule: for each try block there can be zero or more catch blocks ( multiple
	 * catches ), but only one finally block
	 * 
	 * The finally block will not be executed if the program exists ( either by
	 * calling system.exit() or by causing a fatal error that causes the process to
	 * abort ).
	 * 
	 * There are three main categories of exceptional conditions: 1- Checked
	 * exceptions( compile time exceptions ) 2- Unchecked exceptions ( runtime
	 * exceptions ) 3- Errors
	 * 
	 * 1- Checked exception A checked exception is an exception that is checked by
	 * the compiler at compilation time, these are also called as compile time
	 * exceptions. This exceptions cannot simply be ignored, the programmer should
	 * take care of ( handle ) this exceptions. ( Compiler will notify me to handle
	 * the Exceptions )
	 * 
	 * 2- Unchecked exception is an exception that occurs at the time of execution.
	 * This are also called as runtime exceptions. This include programming bugs,
	 * such as logic errors or improper use of an API. Runtime exceptions are
	 * ignored at the time of compilation. ( Compiler will not notify me to handle
	 * the Exceptions )
	 * 
	 * 3- Errors represent serious and usually irrecoverable conditions like a
	 * library incompatibility, infinite recursion, or memory leaks
	 * 
	 * Object (father Class ) [checked] Throwable ( Sub Class ) son unchecked
	 * [checked] {Error} {Exception} Grandson [unchecked] [unchecked] ...
	 * [unchecked] [checked] [checked] IOError VrtualMachineError ...etc
	 * RunTimeEsception IOException SQLException grandson 2
	 * 
	 * 
	 * Exception Error
	 * 
	 * Type: it can be classified into two All error in Java are categories i.e.
	 * checked and unchecked unchecked
	 * 
	 * Occurrence: it occurs at compile time it occurs at run time or run time
	 * 
	 * Causes: it is mainly caused by it is mostly caused by the the application
	 * itself caused by the environment in which the application is running
	 * Recoverable/ Irrecoverable: Exception can be recoverable An Error cannot be
	 * recovered by using the try-catch block should not try to catch it
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 										Throw keyword:
	 * the throw keyword is used to create a custom exception or
	 * error.
	 * 
	 * The throw keyword in Java is used to explicitly throw an exception from
	 * method or any block of code. We can throw either checked or unchecked
	 * exception
	 * 
	 * 
	 * 
	 * 					throw														throws
	 * 
	 * 		used within a method(or constructor)						used with method ( or constructor ) signature
	 * 
	 * 		Used to throw an exception explicitly						use to declare exceptions 
	 * 
	 * 		It can only throw a single exception						can declare multiple exceptions
	 *		
	 *		followed by a throwable instance							followed by an exception class name
	 *
	 *		cannot be used to propagate checked 						can be used to propagate checked 
	 *		exceptions by itself										exceptions by itself
	 *		
	 *
	 *
	 *																	static void testMethod() throws FileNotFoundException
	 *																	{
	 *																		throw new FileNotFoundException();
	 *		try{														}
	 *			throw new FileNotFoundException();						
	 * 		}catch(FileNotFoundException ex){							static void callingTheMethod(){
	 * 		System.out.print(ex);											try{
	 * 		}															----->testMethod();<-----
	 *																	}catch(FileNotFoundException ex){
	 * 																		System.out.print(ex);
	 * 																	}
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */

}
